doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Pending Pickups - RaddiWala
    link(rel="stylesheet", href="/css/style.css")
    link(rel="stylesheet", href="/css/dashboard.css")
    link(rel="stylesheet", href="/css/pickups.css")
    link(href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css", rel="stylesheet")
    style.
      /* Modal Styles */
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
      }

      .modal-content {
        background-color: white;
        padding: 0;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      }

      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
      }

      .modal-header h3 {
        margin: 0;
        color: #333;
      }

      .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #666;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .modal-close:hover {
        color: #333;
      }

      .confirm-content {
        padding: 20px;
        text-align: center;
      }

      .confirm-content p {
        margin: 0;
        color: #333;
        font-size: 16px;
        line-height: 1.5;
      }

      .modal-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 20px;
        padding: 0 20px 20px 20px;
      }

      .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        transition: background-color 0.2s;
      }

      .btn-primary {
        background-color: #007bff;
        color: white;
      }

      .btn-primary:hover {
        background-color: #0056b3;
      }

      .btn-secondary {
        background-color: #6c757d;
        color: white;
      }

      .btn-secondary:hover {
        background-color: #545b62;
      }
  body
    // Navigation Bar
    nav.navbar
      .nav-container
        .nav-logo(onclick="navigateToHome()") RaddiWala
        .nav-menu
          a.nav-link(href="/customer/dashboard") Dashboard
          a.nav-link(href="/customer/sell-scrap") Sell Scrap
          a.nav-link.active(href="/customer/pending-pickups") My Requests
          a.nav-link(href="/customer/completed-pickups") History
          a.nav-link(href="/customer/profile") Profile
        .nav-user
          a.nav-link(href="#", onclick="confirmLogout()") Logout

    // Main Content
    main.dashboard-content
      .container
        .page-header
          h1 Pending Pickups
          p Manage your pending pickup requests and review bids

        .pickups-container#pickupsContainer
          .loading-spinner
            i.fas.fa-spinner.fa-spin
            span Loading pending pickups...

  // Confirmation Modal
  .modal#confirmModal
    .modal-content
      .modal-header
        h3 Confirm Action
        button.modal-close(onclick="hideConfirmModal()") &times;

      .confirm-content
        p#confirmMessage

      .modal-actions
        button.btn.btn-secondary(onclick="hideConfirmModal()") Cancel
        button.btn.btn-primary#confirmButton(onclick="executeConfirmAction()") Confirm

  script(src="/js/main.js")
  script.
    let pendingRequests = [];
    let currentBidId = null;
    let currentRequestId = null;



    // Show notification
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        border-radius: 5px;
        color: white;
        font-weight: bold;
        z-index: 10000;
        max-width: 300px;
        word-wrap: break-word;
      `;

      if (type === 'success') {
        notification.style.backgroundColor = '#28a745';
      } else if (type === 'error') {
        notification.style.backgroundColor = '#dc3545';
      } else {
        notification.style.backgroundColor = '#007bff';
      }

      document.body.appendChild(notification);

      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 5000);
    }

    // Load pending pickups
    async function loadPendingPickups() {
      try {
        console.log('Loading pending pickups...');
        showLoading();

        const response = await fetch('/api/customers/pickup-requests/pending', {
          credentials: 'include' // This ensures cookies are sent with the request
        });

        if (!response.ok) {
          if (response.status === 401) {
            window.location.href = '/login';
            return;
          }
          throw new Error('Failed to load pending pickups');
        }

        const data = await response.json();
        console.log('Loaded pending pickups:', data);
        pendingRequests = Array.isArray(data) ? data : (data.pickupRequests || []);
        renderPendingPickups();
      } catch (error) {
        console.error('Error loading pending pickups:', error);
        showNotification('Failed to load pending pickups', 'error');
        showEmptyState('Failed to load pending pickups');
      }
    }

    // Render pending pickups
    function renderPendingPickups() {
      console.log('Rendering pending pickups:', pendingRequests);
      const container = document.getElementById('pickupsContainer');

      if (pendingRequests.length === 0) {
        console.log('No pending requests found, showing empty state');
        showEmptyState('No pending pickups found');
        return;
      }

      let html = '';
      pendingRequests.forEach(request => {
        const bids = request.bids || [];
        const photos = request.photos || [];

        html +=
          '<div class="pickup-card">' +
            '<div class="pickup-header">' +
              '<div class="pickup-info">' +
                '<h3>' + (Array.isArray(request.wasteType) ? request.wasteType.join(', ') : request.wasteType) + '</h3>' +
                '<p class="weight">' + (request.weightCategory || 'Weight not specified') + '</p>' +
                '<p class="location">' +
                  (request.addressId?.area || '') + ', ' +
                  (request.addressId?.city || '') +
                '</p>' +
              '</div>' +
              '<div class="pickup-status">' +
                '<span class="status-badge ' + (request.status || 'pending') + '">' +
                  (request.status ? request.status.charAt(0).toUpperCase() + request.status.slice(1) : 'Pending') +
                '</span>' +
                '<p class="created-date">Created: ' + new Date(request.createdAt).toLocaleDateString() + '</p>' +
              '</div>' +
            '</div>' +

            '<div class="pickup-details">' +
              (request.description ? '<p><strong>Description:</strong> ' + request.description + '</p>' : '') +
              (request.timeWindow ? '<p><strong>Preferred Time:</strong> ' + request.timeWindow + '</p>' : '') +
              '<p><strong>Address:</strong> ' +
                (request.addressId?.streetAddress || '') + ', ' +
                (request.addressId?.area || '') + ', ' +
                (request.addressId?.city || '') +
              '</p>' +
            '</div>' +

            (photos.length > 0 ?
              '<div class="pickup-photos">' +
                '<h4>Photos (' + photos.length + '):</h4>' +
                '<div class="photos-grid">' +
                  photos.slice(0, 3).map(photo =>
                    '<img src="' + photo + '" alt="Scrap photo" onclick="showImageModal(\'' + photo + '\')">'
                  ).join('') +
                  (photos.length > 3 ? '<div class="more-photos">+' + (photos.length - 3) + ' more</div>' : '') +
                '</div>' +
              '</div>' : ''
            ) +

            '<div class="bids-section">' +
              '<h4>Bids Received (' + bids.length + '):</h4>' +
              (bids.length > 0 ?
                '<div class="bids-list">' +
                  bids.map(bid =>
                    '<div class="bid-item">' +
                      '<div class="bid-info">' +
                        '<div class="raddiwala-info">' +
                          '<strong>' + (bid.raddiWalaId?.name || 'Unknown RaddiWala') + '</strong>' +
                          '<p>Rating: ' + (bid.raddiWalaId?.ratings?.avgRating || 0).toFixed(1) + '/5</p>' +
                        '</div>' +
                        '<div class="bid-details">' +
                          '<p><strong>Price:</strong> Rs ' + bid.pricePerKg + '/kg</p>' +
                          '<p><strong>Pickup Time:</strong> ' + bid.proposedPickupTime + '</p>' +
                          (bid.notes ? '<p><strong>Notes:</strong> ' + bid.notes + '</p>' : '') +
                        '</div>' +
                      '</div>' +
                      '<div class="bid-actions">' +
                        (request.status === 'open' || !request.status ?
                          '<button class="btn btn-primary" onclick="acceptBid(\'' + bid._id + '\', \'' + request._id + '\')">Accept Bid</button>' :
                          request.acceptedBidId === bid._id ?
                            '<span class="bid-status accepted">Accepted</span>' :
                            '<span class="bid-status rejected">Not Selected</span>'
                        ) +
                      '</div>' +
                    '</div>'
                  ).join('') +
                '</div>' :
                '<p class="no-bids">No bids received yet. RaddiWalas will bid on your request soon.</p>'
              ) +
            '</div>' +
          '</div>';
      });

      container.innerHTML = html;
    }

    // Show loading state
    function showLoading() {
      console.log('Showing loading state');
      const container = document.getElementById('pickupsContainer');
      container.innerHTML = '<div class="loading" style="text-align: center; padding: 40px; color: #6c757d;">Loading pending pickups...</div>';
    }

    // Show empty state
    function showEmptyState(message) {
      const container = document.getElementById('pickupsContainer');
      container.innerHTML =
        '<div class="empty-state" style="text-align: center; padding: 40px; background: #f8f9fa; border-radius: 8px; margin: 20px 0;">' +
          '<h3 style="color: #6c757d; margin-bottom: 15px;">' + message + '</h3>' +
          '<p style="color: #6c757d; margin-bottom: 20px;">Create a new pickup request to get started</p>' +
          '<a href="/customer/sell-scrap" class="btn btn-primary" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block;">Sell Scrap Now</a>' +
        '</div>';
    }

    // Accept bid function
    function acceptBid(bidId, requestId) {
      const bid = findBidById(bidId);
      if (!bid) {
        showNotification('Bid not found', 'error');
        return;
      }

      currentBidId = bidId;
      currentRequestId = requestId;

      const raddiWalaName = bid.raddiWalaId?.name || 'Unknown RaddiWala';
      document.getElementById('confirmMessage').textContent =
        `Are you sure you want to accept the bid from ${raddiWalaName}? This action cannot be undone.`;
      document.getElementById('confirmModal').style.display = 'flex';
    }

    // Find bid by ID
    function findBidById(bidId) {
      for (const request of pendingRequests) {
        const bid = request.bids?.find(b => b._id === bidId);
        if (bid) return bid;
      }
      return null;
    }

    // Execute confirm action
    async function executeConfirmAction() {
      if (currentBidId === 'logout') {
        window.location.href = '/logout';
      } else if (currentBidId && currentRequestId) {
        await confirmAcceptBid(currentBidId, currentRequestId);
      }
      hideConfirmModal();
    }

    // Confirm accept bid
    async function confirmAcceptBid(bidId, requestId) {
      try {
        console.log('Accepting bid:', bidId, 'for request:', requestId);

        const response = await fetch(`/api/pickup-requests/${requestId}/accept-bid`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          credentials: 'include', // This ensures cookies are sent with the request
          body: JSON.stringify({ bidId })
        });

        if (!response.ok) {
          if (response.status === 401) {
            window.location.href = '/login';
            return;
          }
          const error = await response.json();
          throw new Error(error.message || 'Failed to accept bid');
        }

        showNotification('Bid accepted successfully!', 'success');
        loadPendingPickups(); // Reload to update the list
      } catch (error) {
        console.error('Error accepting bid:', error);
        showNotification(error.message || 'Failed to accept bid', 'error');
      }
    }

    // Show image modal
    function showImageModal(imageSrc) {
      window.open(imageSrc, '_blank');
    }

    // Confirmation modal functions
    function hideConfirmModal() {
      document.getElementById('confirmModal').style.display = 'none';
      currentBidId = null;
      currentRequestId = null;
    }

    // Logout confirmation
    function confirmLogout() {
      document.getElementById('confirmMessage').textContent = 'Are you sure you want to logout?';
      currentBidId = 'logout';
      currentRequestId = null;
      document.getElementById('confirmModal').style.display = 'flex';
    }

    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
      const modal = document.getElementById('confirmModal');
      if (event.target === modal) {
        hideConfirmModal();
      }
    });

    // Load data when page loads
    document.addEventListener('DOMContentLoaded', function() {
      // Ensure modals are hidden on page load
      const confirmModal = document.getElementById('confirmModal');
      if (confirmModal) {
        confirmModal.style.display = 'none';
      }

      loadPendingPickups();
    });
