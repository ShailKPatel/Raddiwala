doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Pending Pickups - RaddiWala
    link(rel="stylesheet", href="/css/style.css")
    link(rel="stylesheet", href="/css/dashboard.css")
    link(rel="stylesheet", href="/css/pickups.css")
    link(href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css", rel="stylesheet")
    style.
      /* Modal Styles */
      .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
      }

      .modal-content {
        background-color: white;
        padding: 0;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      }

      .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
      }

      .modal-header h3 {
        margin: 0;
        color: #333;
      }

      .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #666;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .modal-close:hover {
        color: #333;
      }

      .pickup-summary {
        padding: 20px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #eee;
      }

      .pickup-summary h4 {
        margin: 0 0 10px 0;
        color: #333;
      }

      .pickup-summary p {
        margin: 5px 0;
        color: #666;
      }

      #completeForm {
        padding: 20px;
      }

      .form-group {
        margin-bottom: 15px;
      }

      .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #333;
      }

      .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 14px;
      }

      .form-group input:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
      }

      .modal-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 20px;
      }

      .error-message {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
      }

      .confirm-content {
        padding: 20px;
        text-align: center;
      }

      .confirm-content p {
        margin: 0;
        color: #333;
        font-size: 16px;
      }
  body
    // Navigation Bar
    nav.navbar
      .nav-container
        .nav-logo(onclick="navigateToHome()") RaddiWala
        .nav-menu
          a.nav-link(href="/raddiwala/dashboard") Dashboard
          a.nav-link(href="/raddiwala/ongoing-requests") Browse Requests
          a.nav-link.active(href="/raddiwala/pending-pickups") My Pickups
          a.nav-link(href="/raddiwala/completed-pickups") History
          a.nav-link(href="/raddiwala/subscription") Premium
          a.nav-link(href="/raddiwala/profile") Profile
        .nav-user
          a.nav-link(href="#", onclick="confirmLogout()") Logout

    // Main Content
    main.dashboard-content
      .container
        .page-header
          h1 Pending Pickups
          p Manage your accepted bids and complete pickups

        .pickups-container#pickupsContainer
          .loading-spinner
            i.fas.fa-spinner.fa-spin
            span Loading pending pickups...

    // Complete Pickup Modal
    .modal#completeModal(style="display: none;")
      .modal-content
        .modal-header
          h3 Complete Pickup
          button.modal-close(onclick="hideCompleteModal()") &times;
        
        .pickup-summary#pickupSummary
          // Pickup details will be populated here
        
        form#completeForm
          .form-group
            label(for="actualWeight") Actual Weight (kg)
            input#actualWeight(type="number", step="0.1", min="0", placeholder="Enter actual weight collected")

          .form-group
            label(for="finalAmount") Final Amount (₹) *
            input#finalAmount(type="number", step="0.01", min="0", required, placeholder="Enter final amount")
            .error-message#amountError

          .modal-actions
            button.btn.btn-secondary(type="button", onclick="hideCompleteModal()") Cancel
            button.btn.btn-primary(type="submit") Mark as Completed

    // Confirmation Modal
    .modal#confirmModal(style="display: none;")
      .modal-content
        .modal-header
          h3 Confirm Action
          button.modal-close(onclick="hideConfirmModal()") &times;

        .confirm-content
          p#confirmMessage

        .modal-actions
          button.btn.btn-secondary(onclick="hideConfirmModal()") Cancel
          button.btn.btn-primary#confirmButton Confirm

    // Footer
    footer.footer
      .container
        .footer-bottom
          p &copy; 2025 Shail K Patel &middot; Crafted out of boredom.
          p
            a(href="https://github.com/ShailKPatel/Raddiwala", target="_blank", rel="noopener noreferrer") GitHub Repo
            span &middot; MIT License

    script(src="/js/main.js")
    script.
      console.log('RaddiWala pending pickups page loaded');
      let pendingPickups = [];
      let currentPickup = null;

      // Load pending pickups
      async function loadPendingPickups() {
        try {
          const response = await RaddiWala.apiCall('/raddiwalas/pickups/pending');
          pendingPickups = response;
          renderPendingPickups();
        } catch (error) {
          console.error('Failed to load pending pickups:', error);
          RaddiWala.showNotification('Failed to load pending pickups', 'error');
          showEmptyState('Failed to load pending pickups');
        }
      }

      function renderPendingPickups() {
        const container = document.getElementById('pickupsContainer');
        
        if (pendingPickups.length === 0) {
          showEmptyState('No pending pickups found');
          return;
        }

        const pickupsHTML = pendingPickups.map(pickup => {
          const request = pickup.pickupRequestId;
          const customer = request.customerId;
          
          return `
            <div class="pickup-card pending">
              <div class="pickup-header">
                <div class="pickup-info">
                  <h3>${request.wasteType}</h3>
                  <p class="pickup-weight">${request.weightCategory}</p>
                  <p class="pickup-date">Accepted: ${RaddiWala.formatDate(pickup.createdAt)}</p>
                </div>
                <div class="pickup-status status-accepted">
                  Accepted
                </div>
              </div>
              
              <div class="pickup-details">
                <div class="pickup-photos">
                  ${request.photos.slice(0, 3).map(photo => 
                    `<img src="${photo}" alt="Scrap photo" onclick="showImageModal('${photo}')">`
                  ).join('')}
                  ${request.photos.length > 3 ? `<div class="more-photos">+${request.photos.length - 3}</div>` : ''}
                </div>
                
                <div class="pickup-description">
                  <p><strong>Customer:</strong> ${customer.name}</p>
                  <div class="customer-rating">
                    ${createStarRating(customer.ratings.avgRating)}
                    <span>(${customer.ratings.totalRatings} reviews)</span>
                  </div>
                  <p><strong>Phone:</strong> ${customer.phone}</p>
                  <p><strong>Address:</strong> ${request.addressId ? `${request.addressId.line || ''}, ${request.addressId.area || ''}, ${request.addressId.city || ''} - ${request.addressId.pincode || ''}` : 'Address not available'}</p>
                  ${request.addressId?.landmark ? `<p><strong>Landmark:</strong> ${request.addressId.landmark}</p>` : ''}
                  ${request.timeWindow ? `<p><strong>Preferred Time:</strong> ${request.timeWindow}</p>` : ''}
                  ${request.description ? `<p><strong>Description:</strong> ${request.description}</p>` : ''}
                </div>
              </div>
              
              <div class="bid-details-section">
                <h4>Your Bid Details</h4>
                <div class="bid-info">
                  <p><strong>Price per kg:</strong> ₹${pickup.itemRates[0]?.pricePerKg || 0}</p>
                  <p><strong>Proposed Pickup Time:</strong> ${pickup.proposedPickupTime}</p>
                  <p><strong>Estimated Amount:</strong> ${RaddiWala.formatCurrency(pickup.totalEstimatedAmount)}</p>
                  ${pickup.notes ? `<p><strong>Notes:</strong> ${pickup.notes}</p>` : ''}
                </div>
              </div>
              
              <div class="pickup-actions">
                <button class="btn btn-primary" onclick="confirmCompletePickup('${pickup._id}')">
                  <i class="fas fa-check"></i>&nbsp;&nbsp;Mark as Completed
                </button>
                <a href="tel:${customer.phone}" class="btn btn-secondary">
                  <i class="fas fa-phone"></i>&nbsp;&nbsp;Call Customer
                </a>
              </div>
            </div>
          `;
        }).join('');

        container.innerHTML = pickupsHTML;
      }

      function createStarRating(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        let stars = '';
        
        for (let i = 0; i < fullStars; i++) {
          stars += '★';
        }
        if (hasHalfStar) {
          stars += '☆';
        }
        for (let i = fullStars + (hasHalfStar ? 1 : 0); i < 5; i++) {
          stars += '☆';
        }
        
        return `<span class="rating">${stars}</span>`;
      }

      function showEmptyState(message) {
        const container = document.getElementById('pickupsContainer');
        container.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-clock"></i>
            <h3>${message}</h3>
            <p>Accepted bids will appear here for you to complete</p>
            <a href="/raddiwala/ongoing-requests" class="btn btn-primary">Browse Ongoing Requests</a>
          </div>
        `;
      }

      // Show complete pickup modal
      function showCompleteModal(bidId) {
        console.log('showCompleteModal called with bidId:', bidId);
        console.log('pendingPickups:', pendingPickups);

        const pickup = pendingPickups.find(p => p._id === bidId);
        console.log('Found pickup:', pickup);

        if (!pickup) {
          console.error('Pickup not found with bidId:', bidId);
          alert('Pickup not found. Please refresh the page.');
          return;
        }

        currentPickup = pickup;

        const modal = document.getElementById('completeModal');
        const summary = document.getElementById('pickupSummary');

        console.log('Complete modal element:', modal);
        console.log('Summary element:', summary);

        if (!modal) {
          console.error('completeModal not found!');
          alert('Complete modal not found. Please refresh the page.');
          return;
        }
        
        const request = pickup.pickupRequestId;
        const customer = request.customerId;
        
        summary.innerHTML = `
          <div class="pickup-info">
            <h4>${request.wasteType} - ${request.weightCategory}</h4>
            <p><strong>Customer:</strong> ${customer.name}</p>
            <p><strong>Your Bid:</strong> ₹${pickup.itemRates[0]?.pricePerKg || 0}/kg</p>
            <p><strong>Estimated Amount:</strong> ${RaddiWala.formatCurrency(pickup.totalEstimatedAmount)}</p>
          </div>
        `;
        
        // Pre-fill final amount with estimated amount
        const finalAmountEl = document.getElementById('finalAmount');
        const actualWeightEl = document.getElementById('actualWeight');

        console.log('finalAmount element:', finalAmountEl);
        console.log('actualWeight element:', actualWeightEl);

        if (finalAmountEl) finalAmountEl.value = pickup.totalEstimatedAmount;
        if (actualWeightEl) actualWeightEl.value = '';

        if (typeof clearErrors === 'function') {
          clearErrors();
        }

        console.log('Setting complete modal display to flex');
        modal.style.display = 'flex';
        modal.classList.add('show');
        console.log('Complete modal should be visible now');
      }

      function hideCompleteModal() {
        document.getElementById('completeModal').style.display = 'none';
        currentPickup = null;
      }

      // Complete pickup form submission
      document.getElementById('completeForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
          actualWeight: parseFloat(document.getElementById('actualWeight').value) || null,
          totalAmount: parseFloat(document.getElementById('finalAmount').value)
        };

        const submitBtn = e.target.querySelector('button[type="submit"]');
        
        // Clear previous errors
        clearErrors();
        
        // Validate form
        if (!validateCompleteForm(formData)) {
          return;
        }

        try {
          console.log('Completing pickup:', currentPickup._id);
          console.log('Form data:', formData);

          if (typeof RaddiWala !== 'undefined' && RaddiWala.showLoading) {
            RaddiWala.showLoading(submitBtn);
          } else {
            submitBtn.disabled = true;
            submitBtn.textContent = 'Completing...';
          }

          if (typeof RaddiWala !== 'undefined' && RaddiWala.apiCall) {
            await RaddiWala.apiCall(`/bids/${currentPickup._id}/complete`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(formData)
            });
          } else {
            // Fallback to fetch
            const response = await fetch(`/api/bids/${currentPickup._id}/complete`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              credentials: 'include',
              body: JSON.stringify(formData)
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || 'Failed to complete pickup');
            }
          }

          if (typeof RaddiWala !== 'undefined' && RaddiWala.showNotification) {
            RaddiWala.showNotification('Pickup marked as completed successfully!', 'success');
          } else {
            alert('Pickup marked as completed successfully!');
          }

          hideCompleteModal();
          console.log('Reloading pending pickups after completion...');
          loadPendingPickups(); // Reload data

        } catch (error) {
          console.error('Error completing pickup:', error);
          if (typeof RaddiWala !== 'undefined' && RaddiWala.showNotification) {
            RaddiWala.showNotification(error.message || 'Failed to complete pickup', 'error');
          } else {
            alert('Error: ' + (error.message || 'Failed to complete pickup'));
          }
        } finally {
          if (typeof RaddiWala !== 'undefined' && RaddiWala.hideLoading) {
            RaddiWala.hideLoading(submitBtn, 'Mark as Completed');
          } else {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Mark as Completed';
          }
        }
      });

      function validateCompleteForm(formData) {
        let isValid = true;
        
        if (!formData.totalAmount || formData.totalAmount <= 0) {
          showError('amountError', 'Please enter a valid final amount');
          isValid = false;
        }
        
        return isValid;
      }

      function showError(elementId, message) {
        document.getElementById(elementId).textContent = message;
      }

      function clearErrors() {
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(el => el.textContent = '');
      }

      // Confirmation modal functions
      function showConfirmModal(message, onConfirm) {
        console.log('showConfirmModal called with message:', message);

        const modal = document.getElementById('confirmModal');
        const messageEl = document.getElementById('confirmMessage');
        const buttonEl = document.getElementById('confirmButton');

        console.log('Modal element:', modal);
        console.log('Message element:', messageEl);
        console.log('Button element:', buttonEl);

        if (!modal) {
          console.error('confirmModal not found!');
          alert('Modal not found. Please refresh the page.');
          return;
        }

        messageEl.textContent = message;
        buttonEl.onclick = () => {
          console.log('Confirm button clicked');
          hideConfirmModal();
          onConfirm();
        };

        console.log('Setting modal display to flex');
        modal.style.display = 'flex';
        modal.classList.add('show');
        console.log('Modal should be visible now');
      }

      function hideConfirmModal() {
        console.log('hideConfirmModal called');
        const modal = document.getElementById('confirmModal');
        modal.classList.remove('show');
        setTimeout(() => {
          modal.style.display = 'none';
        }, 300);
      }

      // Confirm complete pickup
      function confirmCompletePickup(bidId) {
        console.log('confirmCompletePickup clicked with bidId:', bidId);
        showConfirmModal(
          'Are you sure you want to mark this pickup as completed? This will open the completion form.',
          () => {
            console.log('Confirmed, showing complete modal');
            showCompleteModal(bidId);
          }
        );
      }

      // Logout confirmation
      function confirmLogout() {
        showConfirmModal(
          'Are you sure you want to logout?',
          () => {
            window.location.href = '/logout';
          }
        );
      }

      // Close modals when clicking outside
      window.addEventListener('click', function(event) {
        const confirmModal = document.getElementById('confirmModal');
        const completeModal = document.getElementById('completeModal');

        if (event.target === confirmModal) {
          hideConfirmModal();
        }
        if (event.target === completeModal) {
          hideCompleteModal();
        }
      });

      // Load data when page loads
      document.addEventListener('DOMContentLoaded', function() {
        // Ensure modals are hidden on page load
        const completeModal = document.getElementById('completeModal');
        const confirmModal = document.getElementById('confirmModal');
        if (completeModal) {
          completeModal.style.display = 'none';
        }
        if (confirmModal) {
          confirmModal.style.display = 'none';
        }

        loadPendingPickups();
      });
