doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Profile - RaddiWala
    link(rel="stylesheet", href="/css/style.css")
    link(rel="stylesheet", href="/css/dashboard.css")
    link(rel="stylesheet", href="/css/forms.css")
    link(href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css", rel="stylesheet")
  body
    // Navigation Bar
    nav.navbar
      .nav-container
        .nav-logo(onclick="navigateToHome()") RaddiWala
        .nav-menu
          a.nav-link(href="/raddiwala/dashboard") Dashboard
          a.nav-link(href="/raddiwala/ongoing-requests") Browse Requests
          a.nav-link(href="/raddiwala/pending-pickups") My Pickups
          a.nav-link(href="/raddiwala/completed-pickups") History
          a.nav-link(href="/raddiwala/subscription") Premium
          a.nav-link.active(href="/raddiwala/profile") Profile
        .nav-user
          a.nav-link(href="#", onclick="confirmLogout()") Logout

    // Main Content
    main.dashboard-content
      .container
        .page-header
          h1 Profile Management
          p Update your profile information and shop address

        // Profile Overview Card
        .card
          .profile-header-section
            .profile-avatar-container
              .profile-avatar
                img#profileImage(src="/images/default-avatar.svg", alt="Profile Picture", style="display: none;")
                i#profileIcon.fas.fa-user-circle
              .profile-info
                .profile-name-section
                  h2#profileName Loading...
                  .premium-badge#premiumBadge(style="display: none;")
                    i.fas.fa-crown
                    span PREMIUM
                p#profileEmail Loading...
                .profile-rating
                  span#profileRating
                  span#profileReviews
            .profile-actions
              input#profilePictureInput(type="file", accept="image/*", style="display: none;")
              button.btn.btn-secondary(onclick="document.getElementById('profilePictureInput').click()")
                i.fas.fa-camera
                span Change Photo

        // Profile Stats
        .dashboard-grid.two-stats
          .stat-card
            .stat-number#monthlyPickups 0
            .stat-label Monthly Pickups
          .stat-card
            .stat-number#subscriptionStatus Free
            .stat-label Plan Status

        // Basic Information
        .card
          h3 Basic Information
          form#profileForm
            .form-group
              label.form-label(for="name") Full Name *
              input.form-input#name(type="text", required)
              .error-message#nameError

            .form-group
              label.form-label(for="phone") Phone Number *
              input.form-input#phone(type="tel", required)
              .error-message#phoneError

            .form-actions
              button.btn.btn-primary(type="submit") Update Profile

        // Shop Address
        .card
          h3 Shop Address
          form#addressForm
            .form-group
              label.form-label(for="addressLine") Address Line *
              input.form-input#addressLine(type="text", required)
              .error-message#addressLineError

            .form-group
              label.form-label(for="addressArea") Area *
              input.form-input#addressArea(type="text", required)
              .error-message#addressAreaError

            .form-group
              label.form-label(for="addressCity") City *
              input.form-input#addressCity(type="text", required)
              .error-message#addressCityError

            .form-group
              label.form-label(for="addressPincode") Pincode *
              input.form-input#addressPincode(type="text", maxlength="6", required)
              .error-message#addressPincodeError

            .form-group
              label.form-label(for="addressLandmark") Landmark (Optional)
              input.form-input#addressLandmark(type="text")

            .form-actions
              button.btn.btn-primary(type="submit") Update Address

        // Email Change
        .card
          h3 Change Email
          .email-info
            .email-display
              .email-label Email Address
              .email-value#currentEmail Loading...
            button.btn.btn-primary(onclick="showEmailChangeModal()") Change Email

        // Danger Zone
        .card.danger-zone
          h3 Danger Zone
          .danger-content
            .danger-item
              .danger-info
                h4 Delete Account
                p This action cannot be undone. All your data will be permanently deleted.
              .danger-actions
                button.btn.btn-danger(onclick="showDeleteConfirmation()") Delete Account

    // Email Change Modal
    .modal#emailChangeModal(style="display: none;")
      .modal-content
        .modal-header
          h3 Change Email Address
          button.modal-close(onclick="hideEmailChangeModal()") &times;

        .email-change-content
          .step#emailStep
            .form-group
              label(for="newEmailInput") New Email Address *
              input#newEmailInput(type="email", placeholder="Enter new email address", required)
              .error-message#newEmailError
            .form-actions
              button.btn.btn-secondary(onclick="hideEmailChangeModal()") Cancel
              button.btn.btn-primary(onclick="sendEmailOTP()") Send OTP

          .step#otpStep(style="display: none;")
            .otp-info
              p OTP sent to:
                strong#otpEmailDisplay
              p Please check your email and enter the 4-digit code below:
            .form-group
              label(for="emailOtpInput") Enter OTP *
              input#emailOtpInput(type="text", maxlength="4", placeholder="Enter 4-digit OTP")
              .development-mode#emailDevMode(style="display: none;")
                .dev-notice
                  i.fas.fa-code
                  span Debug Mode - OTP:
                  strong#emailDevOTP
              .error-message#emailOtpError
            .form-actions
              button.btn.btn-secondary(onclick="backToEmailStep()") Back
              button.btn.btn-primary(onclick="verifyEmailOTP()") Verify & Update

    // Delete Confirmation Modal
    .modal#deleteModal
      .modal-content
        .modal-header
          h3 Delete Account
          button.modal-close(onclick="hideDeleteModal()") &times;
        
        .delete-warning
          .warning-icon
            i.fas.fa-exclamation-triangle
          .warning-text
            h4 Are you absolutely sure?
            p This action <strong>cannot be undone</strong>. This will permanently delete your account and remove all your data from our servers.
            p Type <strong>DELETE</strong> to confirm:
            input#deleteConfirmation(type="text", placeholder="Type DELETE to confirm")
        
        .modal-actions
          button.btn.btn-secondary(onclick="hideDeleteModal()") Cancel
          button.btn.btn-danger#deleteConfirmBtn(onclick="confirmDelete()" disabled) Delete Account

    // Footer
    footer.footer
      .container
        .footer-bottom
          p &copy; 2025 Shail K Patel &middot; Crafted out of boredom.
          p
            a(href="https://github.com/ShailKPatel/Raddiwala", target="_blank", rel="noopener noreferrer") GitHub Repo
            span &middot; MIT License

    script(src="/js/main.js")
    script.
      let profileData = null;
      let emailOtpSent = false;

      // Load profile data
      async function loadProfileData() {
        try {
          const [profile, subscriptionStatus] = await Promise.all([
            RaddiWala.apiCall('/raddiwalas/profile'),
            RaddiWala.apiCall('/subscriptions/status')
          ]);

          profileData = profile;
          populateProfileData(profile, subscriptionStatus);
        } catch (error) {
          console.error('Failed to load profile data:', error);
          RaddiWala.showNotification('Failed to load profile data', 'error');
        }
      }

      function populateProfileData(profile, subscriptionStatus) {
        // Profile overview
        document.getElementById('profileName').textContent = profile.name;
        document.getElementById('profileEmail').textContent = profile.email;
        document.getElementById('currentEmail').textContent = profile.email;

        // Profile picture
        const profileImage = document.getElementById('profileImage');
        const profileIcon = document.getElementById('profileIcon');

        if (profile.profilePicture) {
          profileImage.src = profile.profilePicture;
          profileImage.style.display = 'block';
          profileIcon.style.display = 'none';
        } else {
          profileImage.style.display = 'none';
          profileIcon.style.display = 'block';
        }
        
        const ratingElement = document.getElementById('profileRating');
        const reviewsElement = document.getElementById('profileReviews');
        
        if (profile.ratings.totalRatings > 0) {
          ratingElement.innerHTML = createStarRating(profile.ratings.avgRating);
          reviewsElement.textContent = `(${profile.ratings.totalRatings} reviews)`;
        } else {
          ratingElement.textContent = 'No ratings yet';
          reviewsElement.textContent = '';
        }

        document.getElementById('monthlyPickups').textContent = profile.monthlyPickupsCount;
        document.getElementById('subscriptionStatus').textContent =
          subscriptionStatus.isPremium ? 'Premium' : 'Free';

        // Show premium badge if user has premium
        const premiumBadge = document.getElementById('premiumBadge');
        if (subscriptionStatus.isPremium) {
          premiumBadge.style.display = 'flex';
        } else {
          premiumBadge.style.display = 'none';
        }

        // Basic information form
        document.getElementById('name').value = profile.name;
        document.getElementById('phone').value = profile.phone;

        // Shop address form
        if (profile.shopAddress) {
          document.getElementById('addressLine').value = profile.shopAddress.line;
          document.getElementById('addressArea').value = profile.shopAddress.area;
          document.getElementById('addressCity').value = profile.shopAddress.city;
          document.getElementById('addressPincode').value = profile.shopAddress.pincode;
          document.getElementById('addressLandmark').value = profile.shopAddress.landmark || '';
        }
      }

      function createStarRating(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        let stars = '';
        
        for (let i = 0; i < fullStars; i++) {
          stars += '★';
        }
        if (hasHalfStar) {
          stars += '☆';
        }
        for (let i = fullStars + (hasHalfStar ? 1 : 0); i < 5; i++) {
          stars += '☆';
        }
        
        return `<span class="rating">${stars}</span>`;
      }

      // Profile form submission
      const profileForm = document.getElementById('profileForm');
      if (profileForm) {
        profileForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('=== RADDIWALA PROFILE FORM SUBMITTED ===');

        const formData = {
          name: document.getElementById('name').value.trim(),
          phone: document.getElementById('phone').value.trim()
        };
        console.log('Form data:', formData);

        const submitBtn = e.target.querySelector('button[type="submit"]');
        clearErrors();

        console.log('Calling validateProfileForm...');
        if (!validateProfileForm(formData)) {
          console.log('Validation failed');
          return;
        }
        console.log('Validation passed');

        try {
          RaddiWala.showLoading(submitBtn);
          
          await RaddiWala.apiCall('/raddiwalas/profile', {
            method: 'PUT',
            body: JSON.stringify(formData)
          });
          
          RaddiWala.showNotification('Profile updated successfully!', 'success');
          loadProfileData(); // Reload data
          
        } catch (error) {
          RaddiWala.showNotification(error.message, 'error');
        } finally {
          RaddiWala.hideLoading(submitBtn, 'Update Profile');
        }
        });
      }

      // Address form submission
      const addressForm = document.getElementById('addressForm');
      if (addressForm) {
        addressForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
          line: document.getElementById('addressLine').value,
          area: document.getElementById('addressArea').value,
          city: document.getElementById('addressCity').value,
          pincode: document.getElementById('addressPincode').value,
          landmark: document.getElementById('addressLandmark').value
        };

        const submitBtn = e.target.querySelector('button[type="submit"]');
        clearAddressErrors();

        if (!validateAddressForm(formData)) {
          return;
        }

        try {
          RaddiWala.showLoading(submitBtn);
          
          await RaddiWala.apiCall('/raddiwalas/shop-address', {
            method: 'PUT',
            body: JSON.stringify(formData)
          });
          
          RaddiWala.showNotification('Shop address updated successfully!', 'success');
          
        } catch (error) {
          RaddiWala.showNotification(error.message, 'error');
        } finally {
          RaddiWala.hideLoading(submitBtn, 'Update Address');
        }
        });
      }

      // Email change modal functions
      function showEmailChangeModal() {
        console.log('=== SHOW EMAIL CHANGE MODAL CLICKED ===');
        const modal = document.getElementById('emailChangeModal');
        console.log('Modal element:', modal);

        if (!modal) {
          console.error('Email change modal not found!');
          alert('Modal not found. Please refresh the page.');
          return;
        }

        modal.style.display = 'flex';
        modal.classList.add('show');

        document.getElementById('emailStep').style.display = 'block';
        document.getElementById('otpStep').style.display = 'none';
        document.getElementById('newEmailInput').value = '';
        document.getElementById('emailOtpInput').value = '';
        clearEmailErrors();
        console.log('Modal should be visible now with forced styles');
      }

      function hideEmailChangeModal() {
        const modal = document.getElementById('emailChangeModal');
        modal.classList.remove('show');
        setTimeout(() => {
          modal.style.display = 'none';
        }, 300);
        clearEmailErrors();
      }

      function backToEmailStep() {
        document.getElementById('emailStep').style.display = 'block';
        document.getElementById('otpStep').style.display = 'none';
        clearEmailErrors();
      }

      async function sendEmailOTP() {
        console.log('=== SEND EMAIL OTP CLICKED ===');
        const newEmail = document.getElementById('newEmailInput').value.trim();
        console.log('New email:', newEmail);

        if (!newEmail) {
          showEmailError('newEmailError', 'Please enter an email address');
          return;
        }

        if (!isValidEmail(newEmail)) {
          showEmailError('newEmailError', 'Please enter a valid email address');
          return;
        }

        // Check if it's the same as current email
        const currentEmail = document.getElementById('currentEmail').textContent;
        if (newEmail === currentEmail) {
          showEmailError('newEmailError', 'This is already your current email address');
          return;
        }

        try {
          console.log('Sending OTP request...');
          const response = await fetch('/api/raddiwalas/send-email-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ newEmail })
          });

          console.log('Response status:', response.status);
          const data = await response.json();
          console.log('Response data:', data);

          if (response.ok) {
            document.getElementById('otpEmailDisplay').textContent = newEmail;
            document.getElementById('emailStep').style.display = 'none';
            document.getElementById('otpStep').style.display = 'block';

            // Show dev OTP if available
            if (data.devOTP) {
              document.getElementById('emailDevOTP').textContent = data.devOTP;
              document.getElementById('emailDevMode').style.display = 'block';
            }

            if (typeof RaddiWala !== 'undefined' && RaddiWala.showNotification) {
              RaddiWala.showNotification('OTP sent to your new email address', 'success');
            } else {
              alert('OTP sent to your new email address');
            }
          } else {
            // Handle specific error cases
            if (data.message && data.message.includes('already in use')) {
              showEmailError('newEmailError', 'This email is already registered. Please use a different email.');
            } else {
              showEmailError('newEmailError', data.message || 'Failed to send OTP');
            }
          }
        } catch (error) {
          console.error('Send OTP error:', error);
          showEmailError('newEmailError', 'Network error. Please try again.');
        }
      }

      async function verifyEmailOTP() {
        const newEmail = document.getElementById('newEmailInput').value.trim();
        const otp = document.getElementById('emailOtpInput').value.trim();

        if (!otp) {
          showEmailError('emailOtpError', 'Please enter the OTP');
          return;
        }

        try {
          const response = await fetch('/api/raddiwalas/verify-email-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'include',
            body: JSON.stringify({ newEmail, otp })
          });

          const data = await response.json();

          if (response.ok) {
            document.getElementById('currentEmail').textContent = newEmail;
            document.getElementById('profileEmail').textContent = newEmail;
            hideEmailChangeModal();
            if (typeof RaddiWala !== 'undefined' && RaddiWala.showNotification) {
              RaddiWala.showNotification('Email address updated successfully!', 'success');
            } else {
              alert('Email address updated successfully!');
            }
          } else {
            showEmailError('emailOtpError', data.message || 'Invalid OTP');
          }
        } catch (error) {
          showEmailError('emailOtpError', 'Network error. Please try again.');
        }
      }

      function showEmailError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
          errorElement.textContent = message;
          errorElement.style.display = 'block';
        }
      }

      function clearEmailErrors() {
        ['newEmailError', 'emailOtpError'].forEach(id => {
          const element = document.getElementById(id);
          if (element) {
            element.textContent = '';
            element.style.display = 'none';
          }
        });
      }

      function isValidEmail(email) {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
      }

      // Comprehensive validation functions
      function isValidPhone(phone) {
        // Indian phone number: 10 digits, can start with 6-9
        return /^[6-9]\d{9}$/.test(phone);
      }

      function isValidPincode(pincode) {
        // Indian pincode: 6 digits
        return /^\d{6}$/.test(pincode);
      }

      function isValidName(name) {
        // Name should be 2-50 characters, only letters and spaces
        return /^[a-zA-Z\s]{2,50}$/.test(name.trim());
      }

      function validateProfileForm(formData) {
        console.log('=== VALIDATING PROFILE FORM ===');
        console.log('Form data to validate:', formData);
        let isValid = true;
        clearErrors();

        // Validate name
        console.log('Validating name:', formData.name);
        if (!formData.name || !isValidName(formData.name)) {
          console.log('Name validation failed');
          showError('nameError', 'Name should be 2-50 characters and contain only letters and spaces');
          isValid = false;
        }

        // Validate phone
        console.log('Validating phone:', formData.phone);
        if (!formData.phone || !isValidPhone(formData.phone)) {
          console.log('Phone validation failed');
          showError('phoneError', 'Please enter a valid 10-digit mobile number starting with 6-9');
          isValid = false;
        }

        console.log('Validation result:', isValid);
        return isValid;
      }

      function validateAddressForm(formData) {
        let isValid = true;
        clearAddressErrors();

        // Validate address line
        if (!formData.line || formData.line.trim().length < 5) {
          showAddressError('addressLineError', 'Address line should be at least 5 characters');
          isValid = false;
        }

        // Validate area
        if (!formData.area || formData.area.trim().length < 2) {
          showAddressError('addressAreaError', 'Area should be at least 2 characters');
          isValid = false;
        }

        // Validate city
        if (!formData.city || !isValidName(formData.city)) {
          showAddressError('addressCityError', 'Please enter a valid city name');
          isValid = false;
        }

        // Validate pincode
        if (!formData.pincode || !isValidPincode(formData.pincode)) {
          showAddressError('addressPincodeError', 'Please enter a valid 6-digit pincode');
          isValid = false;
        }

        return isValid;
      }

      function showError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
          errorElement.textContent = message;
          errorElement.style.display = 'block';
        }
      }

      function showAddressError(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) {
          errorElement.textContent = message;
          errorElement.style.display = 'block';
        }
      }

      function clearErrors() {
        ['nameError', 'phoneError'].forEach(id => {
          const element = document.getElementById(id);
          if (element) {
            element.textContent = '';
            element.style.display = 'none';
          }
        });
      }

      function clearAddressErrors() {
        ['addressLineError', 'addressAreaError', 'addressCityError', 'addressPincodeError'].forEach(id => {
          const element = document.getElementById(id);
          if (element) {
            element.textContent = '';
            element.style.display = 'none';
          }
        });
      }

      // Delete confirmation
      const deleteConfirmation = document.getElementById('deleteConfirmation');
      if (deleteConfirmation) {
        deleteConfirmation.addEventListener('input', function() {
          const confirmBtn = document.getElementById('deleteConfirmBtn');
          if (confirmBtn) {
            confirmBtn.disabled = this.value !== 'DELETE';
          }
        });
      }

      function showDeleteConfirmation() {
        document.getElementById('deleteModal').style.display = 'flex';
      }

      function hideDeleteModal() {
        document.getElementById('deleteModal').style.display = 'none';
        document.getElementById('deleteConfirmation').value = '';
        document.getElementById('deleteConfirmBtn').disabled = true;
      }

      async function confirmDelete() {
        try {
          await RaddiWala.apiCall('/raddiwalas/account', {
            method: 'DELETE'
          });
          
          RaddiWala.showNotification('Account deleted successfully', 'success');
          
          setTimeout(() => {
            window.location.href = '/';
          }, 2000);
          
        } catch (error) {
          RaddiWala.showNotification(error.message, 'error');
        }
      }

      // Profile picture upload
      const profilePictureInput = document.getElementById('profilePictureInput');
      if (profilePictureInput) {
        profilePictureInput.addEventListener('change', async function(e) {
        const file = e.target.files[0];
        if (!file) return;

        // Validate file
        if (!file.type.startsWith('image/')) {
          RaddiWala.showNotification('Please select an image file', 'error');
          return;
        }

        if (file.size > 5 * 1024 * 1024) { // 5MB limit
          RaddiWala.showNotification('Image size must be less than 5MB', 'error');
          return;
        }

        try {
          const formData = new FormData();
          formData.append('profilePicture', file);

          // Use fetch directly instead of RaddiWala.apiCall for file uploads
          const response = await fetch('/api/raddiwalas/profile-picture', {
            method: 'POST',
            body: formData,
            credentials: 'include'
          });

          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Upload failed');
          }

          const result = await response.json();

          // Update profile image
          const profileImage = document.getElementById('profileImage');
          const profileIcon = document.getElementById('profileIcon');

          profileImage.src = result.profilePictureUrl;
          profileImage.style.display = 'block';
          profileIcon.style.display = 'none';

          RaddiWala.showNotification('Profile picture updated successfully!', 'success');
        } catch (error) {
          console.error('Profile picture upload error:', error);
          RaddiWala.showNotification(error.message || 'Something went wrong', 'error');
        }
        });
      }





      // Logout confirmation
      function confirmLogout() {
        if (confirm('Are you sure you want to logout?')) {
          window.location.href = '/logout';
        }
      }

      // Load data when page loads
      console.log('RaddiWala profile page JavaScript loaded');
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM content loaded, calling loadProfileData');
        loadProfileData();
      });
